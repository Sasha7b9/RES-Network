<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects-Debug\GTC-3.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects-Debug\GTC-3.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Aug 07 09:26:14 2023
<BR><P>
<H3>Maximum Stack Usage =        784 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Device::Update() &rArr; Display::Update() &rArr; Menu::Draw() &rArr; Item::Draw(int, int, bool) const &rArr; Item::DrawOpened(int, int, bool) const &rArr; Page::DrawOpened(int, int, bool) const &rArr; Page::DrawItems(int, int, bool) const &rArr; Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ee]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[52]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">CAN1_RX1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4f]">ADC1_2_IRQHandler</a> from hal_it.o(i.ADC1_2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">BusFault_Handler</a> from hal_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[52]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[53]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[48]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[49]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3a]">DebugMon_Handler</a> from hal_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[43]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[65]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[44]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[45]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[46]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[47]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[54]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[41]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[70]">HAL_Delay</a> from stm32f1xx_hal.o(i.HAL_Delay) referenced from bme280.o(i._ZN6BME2804InitEv)
 <LI><a href="#[35]">HardFault_Handler</a> from hal_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5d]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5c]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5f]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5e]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">MemManage_Handler</a> from hal_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">NMI_Handler</a> from hal_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3e]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">PendSV_Handler</a> from hal_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[42]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[66]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[40]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[60]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[61]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[39]">SVC_Handler</a> from hal_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3c]">SysTick_Handler</a> from hal_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[68]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[3f]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[55]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[58]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[57]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[56]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[59]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5a]">TIM3_IRQHandler</a> from hal_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5b]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[62]">USART1_IRQHandler</a> from hal_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[63]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[64]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[67]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[50]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[51]">USB_LP_CAN1_RX0_IRQHandler</a> from hal_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">UsageFault_Handler</a> from hal_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3d]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">CDC_Init_FS()</a> from cdc.o(i._Z11CDC_Init_FSv) referenced 2 times from cdc.o(.data)
 <LI><a href="#[16]">CDC_DeInit_FS()</a> from cdc.o(i._Z13CDC_DeInit_FSv) referenced 2 times from cdc.o(.data)
 <LI><a href="#[73]">CloseMainPage(bool)</a> from pages.o(i._Z13CloseMainPageb) referenced from pages.o(.constdata)
 <LI><a href="#[32]">CloseMeasures(bool)</a> from pagemeasures.o(i._Z13CloseMeasuresb) referenced 2 times from pagemeasures.o(.data)
 <LI><a href="#[24]">ClosePageHC12(bool)</a> from pagehc12.o(i._Z13ClosePageHC12b) referenced 2 times from pagehc12.o(.data)
 <LI><a href="#[19]">USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._Z13USBD_CDC_InitP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[17]">CDC_Control_FS(unsigned char, unsigned char*, unsigned short)</a> from cdc.o(i._Z14CDC_Control_FShPht) referenced 2 times from cdc.o(.data)
 <LI><a href="#[18]">CDC_Receive_FS(unsigned char*, unsigned*)</a> from cdc.o(i._Z14CDC_Receive_FSPhPj) referenced 2 times from cdc.o(.data)
 <LI><a href="#[31]">FixateMeasures(bool)</a> from pagemeasures.o(i._Z14FixateMeasuresb) referenced 2 times from pagemeasures.o(.data)
 <LI><a href="#[26]">OnDraw_Battery(int, int)</a> from pagesystem.o(i._Z14OnDraw_Batteryii) referenced 2 times from pagesystem.o(.data)
 <LI><a href="#[1b]">USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)</a> from usbd_cdc.o(i._Z14USBD_CDC_SetupP19_USBD_HandleTypeDefP13usb_setup_req) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[27]">Before_OpenTime(bool)</a> from pagesystem.o(i._Z15Before_OpenTimeb) referenced 2 times from pagesystem.o(.data)
 <LI><a href="#[28]">ClosePageSystem(bool)</a> from pagesystem.o(i._Z15ClosePageSystemb) referenced 2 times from pagesystem.o(.data)
 <LI><a href="#[25]">OnClose_Battery(bool)</a> from pagesystem.o(i._Z15OnClose_Batteryb) referenced 2 times from pagesystem.o(.data)
 <LI><a href="#[1d]">USBD_CDC_DataIn(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._Z15USBD_CDC_DataInP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1a]">USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._Z15USBD_CDC_DeInitP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[23]">ClosePageDisplay(bool)</a> from pagedisplay.o(i._Z16ClosePageDisplayb) referenced 2 times from pagedisplay.o(.data)
 <LI><a href="#[1e]">USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char)</a> from usbd_cdc.o(i._Z16USBD_CDC_DataOutP19_USBD_HandleTypeDefh) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[2f]">ClosePageDewPoint(bool)</a> from pagemeasures.o(i._Z17ClosePageDewPointb) referenced 2 times from pagemeasures.o(.data)
 <LI><a href="#[2d]">ClosePageHumidity(bool)</a> from pagemeasures.o(i._Z17ClosePageHumidityb) referenced 2 times from pagemeasures.o(.data)
 <LI><a href="#[2b]">ClosePagePressure(bool)</a> from pagemeasures.o(i._Z17ClosePagePressureb) referenced 2 times from pagemeasures.o(.data)
 <LI><a href="#[29]">ClosePageTemperature(bool)</a> from pagemeasures.o(i._Z20ClosePageTemperatureb) referenced 2 times from pagemeasures.o(.data)
 <LI><a href="#[74]">OnOpenClose_MainPage(bool)</a> from pages.o(i._Z20OnOpenClose_MainPageb) referenced from pages.o(.constdata)
 <LI><a href="#[6d]">UART_DMAAbortOnError(__DMA_HandleTypeDef*)</a> from stm32f1xx_hal_uart.o(i._Z20UART_DMAAbortOnErrorP19__DMA_HandleTypeDef) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[1c]">USBD_CDC_EP0_RxReady(_USBD_HandleTypeDef*)</a> from usbd_cdc.o(i._Z20USBD_CDC_EP0_RxReadyP19_USBD_HandleTypeDef) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[30]">OnPress_ResetDewPoint(bool)</a> from pagemeasures.o(i._Z21OnPress_ResetDewPointb) referenced 2 times from pagemeasures.o(.data)
 <LI><a href="#[2e]">OnPress_ResetHumidity(bool)</a> from pagemeasures.o(i._Z21OnPress_ResetHumidityb) referenced 2 times from pagemeasures.o(.data)
 <LI><a href="#[2c]">OnPress_ResetPressure(bool)</a> from pagemeasures.o(i._Z21OnPress_ResetPressureb) referenced 2 times from pagemeasures.o(.data)
 <LI><a href="#[20]">USBD_CDC_GetFSCfgDesc(unsigned short*)</a> from usbd_cdc.o(i._Z21USBD_CDC_GetFSCfgDescPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1f]">USBD_CDC_GetHSCfgDesc(unsigned short*)</a> from usbd_cdc.o(i._Z21USBD_CDC_GetHSCfgDescPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[2a]">OnPress_ResetTemperature(bool)</a> from pagemeasures.o(i._Z24OnPress_ResetTemperatureb) referenced 2 times from pagemeasures.o(.data)
 <LI><a href="#[e]">USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z24USBD_FS_DeviceDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[13]">USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z27USBD_FS_ConfigStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[f]">USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z27USBD_FS_LangIDStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[12]">USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z27USBD_FS_SerialStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[11]">USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z28USBD_FS_ProductStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[21]">USBD_CDC_GetOtherSpeedCfgDesc(unsigned short*)</a> from usbd_cdc.o(i._Z29USBD_CDC_GetOtherSpeedCfgDescPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[14]">USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z30USBD_FS_InterfaceStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[10]">USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</a> from usbd_desc.o(i._Z33USBD_FS_ManufacturerStrDescriptor17USBD_SpeedTypeDefPt) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[22]">USBD_CDC_GetDeviceQualifierDescriptor(unsigned short*)</a> from usbd_cdc.o(i._Z37USBD_CDC_GetDeviceQualifierDescriptorPt) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[72]">Item::~Item()</a> from menuitems.o(i._ZN4ItemD1Ev) referenced from menuitems.o(.constdata__ZTV4Item)
 <LI><a href="#[72]">Item::~Item()</a> from menuitems.o(i._ZN4ItemD1Ev) referenced from menuitems.o(i.__sti___13_MenuItems_cpp_a3e76341)
 <LI><a href="#[71]">ZoneFPS::~ZoneFPS()</a> from display.o(i._ZN7ZoneFPSD1Ev) referenced from zones.o(.constdata__ZTV7ZoneFPS)
 <LI><a href="#[71]">ZoneFPS::~ZoneFPS()</a> from display.o(i._ZN7ZoneFPSD1Ev) referenced from display.o(i.__sti___11_Display_cpp_238b98d4)
 <LI><a href="#[6e]">HAL_I2C1::Read(unsigned char, unsigned char, unsigned char*, unsigned short)</a> from hal_i2c.o(i._ZN8HAL_I2C14ReadEhhPht) referenced from bme280.o(i._ZN6BME2804InitEv)
 <LI><a href="#[6f]">HAL_I2C1::Write(unsigned char, unsigned char, unsigned char*, unsigned short)</a> from hal_i2c.o(i._ZN8HAL_I2C15WriteEhhPht) referenced from bme280.o(i._ZN6BME2804InitEv)
 <LI><a href="#[7f]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[75]">__sti___11_Display_cpp_238b98d4</a> from display.o(i.__sti___11_Display_cpp_238b98d4) referenced from display.o(.init_array)
 <LI><a href="#[76]">__sti___12_Keyboard_cpp_key1</a> from keyboard.o(i.__sti___12_Keyboard_cpp_key1) referenced from keyboard.o(.init_array)
 <LI><a href="#[7a]">__sti___12_PageHC12_cpp_bcd072d0</a> from pagehc12.o(i.__sti___12_PageHC12_cpp_bcd072d0) referenced from pagehc12.o(.init_array)
 <LI><a href="#[7e]">__sti___12_Settings_cpp_gset</a> from settings.o(i.__sti___12_Settings_cpp_gset) referenced from settings.o(.init_array)
 <LI><a href="#[78]">__sti___13_MenuItems_cpp_a3e76341</a> from menuitems.o(i.__sti___13_MenuItems_cpp_a3e76341) referenced from menuitems.o(.init_array)
 <LI><a href="#[7c]">__sti___14_PageSystem_cpp_09ff3017</a> from pagesystem.o(i.__sti___14_PageSystem_cpp_09ff3017) referenced from pagesystem.o(.init_array)
 <LI><a href="#[79]">__sti___15_PageDisplay_cpp_868e8b3c</a> from pagedisplay.o(i.__sti___15_PageDisplay_cpp_868e8b3c) referenced from pagedisplay.o(.init_array)
 <LI><a href="#[7d]">__sti___16_PageMeasures_cpp_158d5ec3</a> from pagemeasures.o(i.__sti___16_PageMeasures_cpp_158d5ec3) referenced from pagemeasures.o(.init_array)
 <LI><a href="#[77]">__sti___8_HC12_cpp_2b370480</a> from hc12.o(i.__sti___8_HC12_cpp_2b370480) referenced from hc12.o(.init_array)
 <LI><a href="#[7b]">__sti___9_Pages_cpp_pageMain</a> from pages.o(i.__sti___9_Pages_cpp_pageMain) referenced from pages.o(.init_array)
 <LI><a href="#[6c]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[6b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6a]">_sputc</a> from _sputc.o(.text) referenced from c89vsprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[81]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[83]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2c2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2c3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2c4]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2c5]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2c6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[84]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[c9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[86]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[88]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8a]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8b]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[2c7]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[2c8]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[8c]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8f]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[90]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[92]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[94]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[97]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[98]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[9a]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2c9]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[9c]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[a0]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a2]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2ca]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b3]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2cb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2cc]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2cd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[2ce]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2cf]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2d0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2d1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2d2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2d3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2d4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2d5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2d6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2d7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2d8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2d9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2da]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2db]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2dc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2dd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2de]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2df]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[2e0]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2e1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2e2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2e3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[2e4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[2e5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2e6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2e7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[82]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2e8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b0]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b2]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2e9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b4]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Device::Update() &rArr; Display::Update() &rArr; Menu::Draw() &rArr; Item::Draw(int, int, bool) const &rArr; Item::DrawOpened(int, int, bool) const &rArr; Page::DrawOpened(int, int, bool) const &rArr; Page::DrawItems(int, int, bool) const &rArr; Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2ea]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ef]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b7]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2eb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b9]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[210]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280::GetMeasures(float*, float*, float*)
</UL>

<P><STRONG><a name="[33]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2ec]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[52]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2ed]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::SetFormat(const char*, ...)
</UL>

<P><STRONG><a name="[be]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[bf]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[c0]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bd]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8d]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[c3]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[c5]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[91]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[99]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[c6]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[93]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9b]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[87]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[c7]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ca]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[a7]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Display_cpp_238b98d4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_MenuItems_cpp_a3e76341
</UL>

<P><STRONG><a name="[25f]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::operator ==(const Settings&)
</UL>

<P><STRONG><a name="[1f3]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Size() const
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Text::DrawBig(int, int, int, const char*, Color::E)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::SetMeasure(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[24a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::Load(unsigned, Settings&)
</UL>

<P><STRONG><a name="[ce]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2ee]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::CreateMessage(TypeMeasure::E, float)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawBigMeasure()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::Reset()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::Load()
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Before_OpenTime(bool)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::DrawClosed(int, int, bool) const
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::ChangeCurrentField(Key::E) const
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawClosed(int, int, bool) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawTitle(int, int) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_Settings_cpp_gset
</UL>

<P><STRONG><a name="[2ef]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Buffer::Fill(Color::E)
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data(bme280_dev*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::SetTime(const PackedTime&)
</UL>

<P><STRONG><a name="[2f2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[29f]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[d2]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::SetTime(const PackedTime&)
</UL>

<P><STRONG><a name="[2f4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[cd]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[cc]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[d6]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[d7]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[d9]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[c2]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[85]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[2f5]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[bc]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[6a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[9f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[e4]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a1]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[a3]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[95]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[c4]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[af]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[2f6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[d1]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2f7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2f8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[d4]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[a9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[2f9]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[e9]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a5]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[eb]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[b]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[db]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ec]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ba]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b1]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e8]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[b6]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f0]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[ea]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[f1]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2fd]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2ff]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f4]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[f3]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[f5]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[f6]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[dd]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[de]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f7]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[4f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_it.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC1_2_IRQHandler &rArr; HAL_ADC_IRQHandler &rArr; HAL_ADC_ConvCpltCallback &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[fb]"></a>ADC_Enable</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
</UL>

<P><STRONG><a name="[37]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f1xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[103]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Init()
</UL>

<P><STRONG><a name="[fe]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_ConvCpltCallback &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[f8]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_IRQHandler &rArr; HAL_ADC_ConvCpltCallback &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_ADC_Init</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Init &rArr; ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Init()
</UL>

<P><STRONG><a name="[104]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[107]"></a>HAL_ADC_Start_IT</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Start_IT &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Update()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Init()
</UL>

<P><STRONG><a name="[16e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bme280.o(i._ZN6BME2804InitEv)
</UL>
<P><STRONG><a name="[108]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f1xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase(unsigned)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase(unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::Save(unsigned, const Settings&)
</UL>

<P><STRONG><a name="[24c]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::Save(unsigned, const Settings&)
</UL>

<P><STRONG><a name="[10b]"></a>HAL_FLASH_Program</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord(unsigned, unsigned short)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::Save(unsigned, const Settings&)
</UL>

<P><STRONG><a name="[24b]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::Save(unsigned, const Settings&)
</UL>

<P><STRONG><a name="[119]"></a>HAL_GPIO_Init</STRONG> (Thumb, 762 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Init()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Init()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC12::Init()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Init()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_HC12::Init()
</UL>

<P><STRONG><a name="[258]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::KeyPressed(Key::E)
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::CallbackOnTimer()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int, int, int, int)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC12::Init()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData8(unsigned char)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendCommand(unsigned char)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData16(unsigned short)
</UL>

<P><STRONG><a name="[fa]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode(RTC_HandleTypeDef*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode(RTC_HandleTypeDef*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::CurrentTime()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280::GetMeasures(float*, float*, float*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::RTC_EnterInitMode(RTC_HandleTypeDef*)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::RTC_ExitInitMode(RTC_HandleTypeDef*)
</UL>

<P><STRONG><a name="[253]"></a>HAL_I2C_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C1::Write(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C1::Read(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[10e]"></a>HAL_I2C_Init</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C1::Init()
</UL>

<P><STRONG><a name="[111]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 818 bytes, Stack size 48 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C1::Read(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[115]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C1::Write(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[10f]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[11c]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11d]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[21a]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Stop()
</UL>

<P><STRONG><a name="[141]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Start(int)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Init()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_HC12::Init()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[11f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Start(int)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Init()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_HC12::Init()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>

<P><STRONG><a name="[11b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[190]"></a>HAL_PCDEx_PMAConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f1xx_hal_pcd_ex.o(i.HAL_PCDEx_PMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCDEx_PMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[14a]"></a>HAL_PCDEx_SetConnectionState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCDEx_SetConnectionState))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[122]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler(PCD_HandleTypeDef*)
</UL>

<P><STRONG><a name="[124]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler(PCD_HandleTypeDef*)
</UL>

<P><STRONG><a name="[126]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[128]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[18f]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[12a]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[12c]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler(PCD_HandleTypeDef*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[12e]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[131]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler(PCD_HandleTypeDef*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[132]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = HAL_PCD_IRQHandler &rArr; PCD_EP_ISR_Handler(PCD_HandleTypeDef*) &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler(PCD_HandleTypeDef*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC::OnIRQHandler()
</UL>

<P><STRONG><a name="[13a]"></a>HAL_PCD_Init</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ResumeCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[147]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler(PCD_HandleTypeDef*)
</UL>

<P><STRONG><a name="[149]"></a>HAL_PCD_Start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f1xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetConnectionState
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[138]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::Init()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[151]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[153]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[250]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetOscConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::Init()
</UL>

<P><STRONG><a name="[110]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(UART_HandleTypeDef*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[14f]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[152]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[154]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1074 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay(unsigned)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::Init()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[156]"></a>HAL_RTC_Init</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode(RTC_HandleTypeDef*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode(RTC_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::Init()
</UL>

<P><STRONG><a name="[157]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[158]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_SPI_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
</UL>

<P><STRONG><a name="[15c]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[167]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Stop()
</UL>

<P><STRONG><a name="[15f]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Start(int)
</UL>

<P><STRONG><a name="[15e]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[160]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[21c]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Start(int)
</UL>

<P><STRONG><a name="[219]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Stop()
</UL>

<P><STRONG><a name="[163]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Beeper::CallbackOnTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, beeper.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; Beeper::CallbackOnTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::CallbackOnTimer()
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError(__DMA_HandleTypeDef*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT(UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; HC12::ReceiveCallback() &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT(UART_HandleTypeDef*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer(UART_HandleTypeDef*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT(UART_HandleTypeDef*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT(UART_HandleTypeDef*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig(UART_HandleTypeDef*) &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(UART_HandleTypeDef*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_HC12::Init()
</UL>

<P><STRONG><a name="[173]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_HC12::Init()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC12::ReceiveCallback()
</UL>

<P><STRONG><a name="[175]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_it.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HC12::ReceiveCallback() &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC12::ReceiveCallback()
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[177]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_HC12::Transmit(const void*, int)
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[35]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Beeper::CallbackOnTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[62]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT(UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; HC12::ReceiveCallback() &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17a]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS(unsigned char*, unsigned*)
</UL>

<P><STRONG><a name="[1e4]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC::Init()
</UL>

<P><STRONG><a name="[1a4]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS(unsigned char*, unsigned*)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS()
</UL>

<P><STRONG><a name="[1a3]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_SetTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC::Transmit(const void*, int)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS()
</UL>

<P><STRONG><a name="[17c]"></a>USBD_CDC_TransmitPacket</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC::Transmit(const void*, int)
</UL>

<P><STRONG><a name="[1b0]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[17e]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[17f]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[180]"></a>USBD_CtlError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[182]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[183]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[184]"></a>USBD_CtlSendData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[185]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[186]"></a>USBD_GetString</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
</UL>

<P><STRONG><a name="[188]"></a>USBD_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC::Init()
</UL>

<P><STRONG><a name="[18a]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[18c]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[123]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[125]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[18e]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[189]"></a>USBD_LL_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_PMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1a0]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[191]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>

<P><STRONG><a name="[17b]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[143]"></a>USBD_LL_Reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[144]"></a>USBD_LL_Resume</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[145]"></a>USBD_LL_SOF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[142]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[192]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[148]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[181]"></a>USBD_LL_StallEP</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[197]"></a>USBD_LL_Start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[14d]"></a>USBD_LL_Suspend</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[17d]"></a>USBD_LL_Transmit</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status(HAL_StatusTypeDef)
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
</UL>

<P><STRONG><a name="[193]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1e3]"></a>USBD_RegisterClass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC::Init()
</UL>

<P><STRONG><a name="[18d]"></a>USBD_RunTestMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1af]"></a>USBD_SetClassConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>

<P><STRONG><a name="[198]"></a>USBD_Start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC::Init()
</UL>

<P><STRONG><a name="[194]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[196]"></a>USBD_StdEPReq</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[195]"></a>USBD_StdItfReq</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1b7]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[1a8]"></a>USBD_static_malloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[12b]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 938 bytes, Stack size 8 bytes, stm32f1xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[13d]"></a>USB_CoreInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[127]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 532 bytes, Stack size 8 bytes, stm32f1xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[14b]"></a>USB_DevConnect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[140]"></a>USB_DevDisconnect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[13f]"></a>USB_DevInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f1xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[13c]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[130]"></a>USB_EP0_OutStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[129]"></a>USB_EPClearStall</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, stm32f1xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[12f]"></a>USB_EPSetStall</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f1xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[12d]"></a>USB_EPStartXfer</STRONG> (Thumb, 818 bytes, Stack size 20 bytes, stm32f1xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[14c]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[51]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; CDC::OnIRQHandler() &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_ISR_Handler(PCD_HandleTypeDef*) &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC::OnIRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>USB_ReadInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>USB_ReadPMA</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, stm32f1xx_ll_usb.o(i.USB_ReadPMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_ReadPMA
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler(PCD_HandleTypeDef*)
</UL>

<P><STRONG><a name="[13e]"></a>USB_SetCurrentMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[146]"></a>USB_SetDevAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[1a1]"></a>USB_WritePMA</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f1xx_ll_usb.o(i.USB_WritePMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_WritePMA
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_ISR_Handler(PCD_HandleTypeDef*)
</UL>

<P><STRONG><a name="[38]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>OnDraw_Battery(int, int)</STRONG> (Thumb, 54 bytes, Stack size 96 bytes, pagesystem.o(i._Z14OnDraw_Batteryii))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = OnDraw_Battery(int, int) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::GetVoltage()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagesystem.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>ClosePageSystem(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pagesystem.o(i._Z15ClosePageSystemb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClosePageSystem(bool) &rArr; Page::Close() const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagesystem.o(.data)
</UL>
<P><STRONG><a name="[10a]"></a>FLASH_PageErase(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i._Z15FLASH_PageErasej))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[25]"></a>OnClose_Battery(bool)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pagesystem.o(i._Z15OnClose_Batteryb))
<BR>[Address Reference Count : 1]<UL><LI> pagesystem.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>ClosePageDisplay(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pagedisplay.o(i._Z16ClosePageDisplayb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClosePageDisplay(bool) &rArr; Page::Close() const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagedisplay.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>ClosePageDewPoint(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pagemeasures.o(i._Z17ClosePageDewPointb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClosePageDewPoint(bool) &rArr; Page::Close() const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>ClosePageHumidity(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pagemeasures.o(i._Z17ClosePageHumidityb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClosePageHumidity(bool) &rArr; Page::Close() const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>ClosePagePressure(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pagemeasures.o(i._Z17ClosePagePressureb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClosePagePressure(bool) &rArr; Page::Close() const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>ClosePageTemperature(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pagemeasures.o(i._Z20ClosePageTemperatureb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClosePageTemperature(bool) &rArr; Page::Close() const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>OnPress_ResetDewPoint(bool)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pagemeasures.o(i._Z21OnPress_ResetDewPointb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnPress_ResetDewPoint(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::ResetMeasure(TypeMeasure::E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>OnPress_ResetHumidity(bool)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pagemeasures.o(i._Z21OnPress_ResetHumidityb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnPress_ResetHumidity(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::ResetMeasure(TypeMeasure::E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>OnPress_ResetPressure(bool)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pagemeasures.o(i._Z21OnPress_ResetPressureb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnPress_ResetPressure(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::ResetMeasure(TypeMeasure::E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>OnPress_ResetTemperature(bool)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pagemeasures.o(i._Z24OnPress_ResetTemperatureb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnPress_ResetTemperature(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::ResetMeasure(TypeMeasure::E)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i._Z24USBD_FS_DeviceDescriptor17USBD_SpeedTypeDefPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i._Z27USBD_FS_ConfigStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_desc.o(i._Z27USBD_FS_LangIDStrDescriptor17USBD_SpeedTypeDefPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_desc.o(i._Z27USBD_FS_SerialStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; Get_SerialNum() &rArr; IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i._Z28USBD_FS_ProductStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i._Z30USBD_FS_InterfaceStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_desc.o(i._Z33USBD_FS_ManufacturerStrDescriptor17USBD_SpeedTypeDefPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef, unsigned short*) &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBD_CDC_GetDeviceQualifierDescriptor(unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i._Z37USBD_CDC_GetDeviceQualifierDescriptorPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1db]"></a>TimeMeterMS::ElapsedTime()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i._ZN11TimeMeterMS11ElapsedTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimeMeterMS::ElapsedTime() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::CurrentTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::UpdateKey(Key::E)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int, int, int, int)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Update()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData8(unsigned char)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendCommand(unsigned char)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData16(unsigned short)
</UL>

<P><STRONG><a name="[1dd]"></a>TimeMeterMS::Reset()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(i._ZN11TimeMeterMS5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimeMeterMS::Reset() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::CurrentTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::UpdateKey(Key::E)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::TimeMeterMS()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Update()
</UL>

<P><STRONG><a name="[1de]"></a>TimeMeterMS::TimeMeterMS()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(i._ZN11TimeMeterMSC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimeMeterMS::TimeMeterMS() &rArr; TimeMeterMS::Reset() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_Keyboard_cpp_key1
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int, int, int, int)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Update()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData8(unsigned char)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendCommand(unsigned char)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData16(unsigned short)
</UL>

<P><STRONG><a name="[300]"></a>TimeMeterMS::TimeMeterMS__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, timer.o(i._ZN11TimeMeterMSC1Ev), UNUSED)

<P><STRONG><a name="[1df]"></a>HAL_USART_HC12::Init()</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, hal_usart_hc12.o(i._ZN14HAL_USART_HC124InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_USART_HC12::Init() &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_USART_HC12::Transmit(const void*, int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_usart_hc12.o(i._ZN14HAL_USART_HC128TransmitEPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_USART_HC12::Transmit(const void*, int) &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC12::Transmit(const void*, int)
</UL>

<P><STRONG><a name="[1a2]"></a>CDC::OnIRQHandler()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cdc.o(i._ZN3CDC12OnIRQHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = CDC::OnIRQHandler() &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_ISR_Handler(PCD_HandleTypeDef*) &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1e2]"></a>CDC::Init()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cdc.o(i._ZN3CDC4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CDC::Init() &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[1e5]"></a>CDC::Transmit(const void*, int)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cdc.o(i._ZN3CDC8TransmitEPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CDC::Transmit(const void*, int) &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::Send(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[1e6]"></a>HAL::Init()</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, hal.o(i._ZN3HAL4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL::Init() &rArr; SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C1::Init()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::Init()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Init()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_HC12::Init()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[1ea]"></a>HAL::GetUID()</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, hal.o(i._ZN3HAL6GetUIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL::GetUID() &rArr; String&lang;(int)64&rang;::String(const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::CalculateCRC(const void*, int)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::CreateMessage(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[28c]"></a>Int::Int(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, values.o(i._ZN3IntC1Ei))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[301]"></a>Int::Int__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, values.o(i._ZN3IntC1Ei), UNUSED)

<P><STRONG><a name="[298]"></a>Key::Key(Key::E)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, keyboard.o(i._ZN3KeyC1ENS_1EE))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_Keyboard_cpp_key1
</UL>

<P><STRONG><a name="[302]"></a>Key::Key__sub_object(Key::E)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keyboard.o(i._ZN3KeyC1ENS_1EE), UNUSED)

<P><STRONG><a name="[1ec]"></a>Char::Draw(int, int, int, Color::E)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, text.o(i._ZN4Char4DrawEiiiN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Width(unsigned char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Draw(int, int, char)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Text::DrawBig(int, int, int, const char*, Color::E)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetCurrent(Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
</UL>

<P><STRONG><a name="[2a0]"></a>Char::Char(char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, string.o(i._ZN4CharC1Ec))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
</UL>

<P><STRONG><a name="[303]"></a>Char::Char__sub_object(char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, string.o(i._ZN4CharC1Ec), UNUSED)

<P><STRONG><a name="[1f2]"></a>Font::GetSpacing()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, font.o(i._ZN4Font10GetSpacingEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Text::Length(const char*)
</UL>

<P><STRONG><a name="[204]"></a>Font::Set(TypeFont::E)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, font.o(i._ZN4Font3SetEN8TypeFont1EE))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Draw()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawTime()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawBigMeasure()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
</UL>

<P><STRONG><a name="[1f1]"></a>Font::Text::Length(const char*)</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, font.o(i._ZN4Font4Text6LengthEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font::Text::Length(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Width(unsigned char)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::GetSpacing()
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E)
</UL>

<P><STRONG><a name="[1ef]"></a>Font::Text::DrawBig(int, int, int, const char*, Color::E)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, font.o(i._ZN4Font4Text7DrawBigEiiiPKcN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::DrawBig(int, int, int, char)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetCurrent(Color::E)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Draw(int, int, int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawBigMeasure()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char::Draw(int, int, int, Color::E)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[1f6]"></a>Font::Width()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, font.o(i._ZN4Font5WidthEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::DrawBig(int, int, int, char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Draw(int, int, char)
</UL>

<P><STRONG><a name="[1f5]"></a>Font::Height()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, font.o(i._ZN4Font6HeightEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::DrawBig(int, int, int, char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Draw(int, int, char)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
</UL>

<P><STRONG><a name="[1f7]"></a>Font::Symbol::LineNotEmpty(unsigned, int)</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, font.o(i._ZN4Font6Symbol12LineNotEmptyEji))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::DrawBig(int, int, int, char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Draw(int, int, char)
</UL>

<P><STRONG><a name="[1f8]"></a>Font::Symbol::BitInLineIsExist(unsigned, int, int)</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, font.o(i._ZN4Font6Symbol16BitInLineIsExistEjii))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font::Symbol::BitInLineIsExist(unsigned, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::DrawBig(int, int, int, char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Draw(int, int, char)
</UL>

<P><STRONG><a name="[1ee]"></a>Font::Symbol::Draw(int, int, char)</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, font.o(i._ZN4Font6Symbol4DrawEiic))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Font::Symbol::Draw(int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Width(unsigned char)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::BitInLineIsExist(unsigned, int, int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::LineNotEmpty(unsigned, int)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Width()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Height()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::Set(int, int, Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char::Draw(int, int, int, Color::E)
</UL>

<P><STRONG><a name="[1f0]"></a>Font::Symbol::Width(unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, font.o(i._ZN4Font6Symbol5WidthEh))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::DrawBig(int, int, int, char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Draw(int, int, char)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Text::Length(const char*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char::Draw(int, int, int, Color::E)
</UL>

<P><STRONG><a name="[1f4]"></a>Font::Symbol::DrawBig(int, int, int, char)</STRONG> (Thumb, 182 bytes, Stack size 80 bytes, font.o(i._ZN4Font6Symbol7DrawBigEiiic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Width(unsigned char)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::BitInLineIsExist(unsigned, int, int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::LineNotEmpty(unsigned, int)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Width()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Height()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::Set(int, int, Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Text::DrawBig(int, int, int, const char*, Color::E)
</UL>

<P><STRONG><a name="[176]"></a>HC12::ReceiveCallback()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc12.o(i._ZN4HC1215ReceiveCallbackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HC12::ReceiveCallback() &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1fa]"></a>HC12::Init()</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, hc12.o(i._ZN4HC124InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HC12::Init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[1fc]"></a>HC12::Transmit(const void*, int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hc12.o(i._ZN4HC128TransmitEPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HC12::Transmit(const void*, int) &rArr; HAL_USART_HC12::Transmit(const void*, int) &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USART_HC12::Transmit(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::Send(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[72]"></a>Item::~Item()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menuitems.o(i._ZN4ItemD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> menuitems.o(i.__sti___13_MenuItems_cpp_a3e76341)
<LI> menuitems.o(.constdata__ZTV4Item)
</UL>
<P><STRONG><a name="[304]"></a>Item::~Item__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, menuitems.o(i._ZN4ItemD1Ev), UNUSED)

<P><STRONG><a name="[1eb]"></a>Math::CalculateCRC(const void*, int)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, math.o(i._ZN4Math12CalculateCRCEPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Math::CalculateCRC(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::SDBMHash(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GetUID()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::CreateMessage(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[1fd]"></a>Math::SDBMHash(unsigned, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, math.o(i._ZN4Math8SDBMHashEjh))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::CalculateCRC(const void*, int)
</UL>

<P><STRONG><a name="[1fe]"></a>Menu::ShortPress(Key::E)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, menu.o(i._ZN4Menu10ShortPressEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Menu::ShortPress(Key::E) &rArr; Item::ShortPressure(Key::E) const &rArr; TimeItem::ShortPressure(Key::E) const &rArr; HAL_RTC::SetTime(const PackedTime&) &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Opened()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ShortPressure(Key::E) const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Open() const
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::UpdateKey(Key::E)
</UL>

<P><STRONG><a name="[202]"></a>Menu::Draw()</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, menu.o(i._ZN4Menu4DrawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = Menu::Draw() &rArr; Item::Draw(int, int, bool) const &rArr; Item::DrawOpened(int, int, bool) const &rArr; Page::DrawOpened(int, int, bool) const &rArr; Page::DrawItems(int, int, bool) const &rArr; Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Set(TypeFont::E)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::EndScene()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::BeginScene(Color::E)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Draw(int, int, bool) const
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::NumberOnPage() const
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawOpened(int, int, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[1ff]"></a>Menu::Opened()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menu.o(i._ZN4Menu6OpenedEv))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::LongPress(Key::E)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::ShortPress(Key::E)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[209]"></a>Menu::LongPress(Key::E)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, menu.o(i._ZN4Menu9LongPressEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Menu::LongPress(Key::E) &rArr; Item::LongPressure(Key::E) const &rArr; Page::LongPressure(Key::E) const &rArr; StateItem::LongPressure(Key::E) const &rArr; Item::IsOpened() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Opened()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::LongPressure(Key::E) const
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::UpdateKey(Key::E)
</UL>

<P><STRONG><a name="[20b]"></a>Color::GetCurrent()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, colors.o(i._ZN5Color10GetCurrentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::CurrentTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Buffer::SetPoint(int, int)
</UL>

<P><STRONG><a name="[1ed]"></a>Color::SetCurrent(Color::E)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, colors.o(i._ZN5Color10SetCurrentENS_1EE))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Text::DrawBig(int, int, int, const char*, Color::E)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Fill(int, int, Color::E)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine::Draw(int, int, Color::E)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::Set(int, int, Color::E)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine::Draw(int, int, Color::E)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char::Draw(int, int, int, Color::E)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E)
</UL>

<P><STRONG><a name="[269]"></a>Color::MenuLetters(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, colors.o(i._ZN5Color11MenuLettersEb))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::DrawClosed(int, int, bool) const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawControl(int, int, const String&lang;(int)64&rang;&, bool) const
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawClosed(int, int, bool) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[267]"></a>Color::MenuItem()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, colors.o(i._ZN5Color8MenuItemEv))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawControl(int, int, const String&lang;(int)64&rang;&, bool) const
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[293]"></a>Float::Float(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, values.o(i._ZN5FloatC1Ef))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[305]"></a>Float::Float__sub_object(float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, values.o(i._ZN5FloatC1Ef), UNUSED)

<P><STRONG><a name="[20c]"></a>HLine::Draw(int, int, Color::E)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, display.o(i._ZN5HLine4DrawEiiN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HLine::Draw(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Buffer::SetPoint(int, int)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetCurrent(Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Draw(int, int, Color::E)
</UL>

<P><STRONG><a name="[262]"></a>HLine::HLine(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, display.o(i._ZN5HLineC1Ei))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Draw(int, int, Color::E)
</UL>

<P><STRONG><a name="[306]"></a>HLine::HLine__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, display.o(i._ZN5HLineC1Ei), UNUSED)

<P><STRONG><a name="[1f9]"></a>Point::Set(int, int, Color::E)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, display.o(i._ZN5Point3SetEiiN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Buffer::SetPoint(int, int)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetCurrent(Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::DrawBig(int, int, int, char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Symbol::Draw(int, int, char)
</UL>

<P><STRONG><a name="[1dc]"></a>Timer::CurrentTime()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(i._ZN5Timer11CurrentTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::Reset()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::SetMeasure(TypeMeasure::E, float)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::GetCurrent()
</UL>

<P><STRONG><a name="[20e]"></a>VLine::Draw(int, int, Color::E)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, display.o(i._ZN5VLine4DrawEiiN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VLine::Draw(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Buffer::SetPoint(int, int)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetCurrent(Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Fill(int, int, Color::E)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Draw(int, int, Color::E)
</UL>

<P><STRONG><a name="[263]"></a>VLine::VLine(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, display.o(i._ZN5VLineC1Ei))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Fill(int, int, Color::E)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Draw(int, int, Color::E)
</UL>

<P><STRONG><a name="[307]"></a>VLine::VLine__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, display.o(i._ZN5VLineC1Ei), UNUSED)

<P><STRONG><a name="[20f]"></a>BME280::GetMeasures(float*, float*, float*)</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, bme280.o(i._ZN6BME28011GetMeasuresEPfS0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BME280::GetMeasures(float*, float*, float*) &rArr; bme280_get_sensor_data &rArr; bme280_compensate_data &rArr; compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[213]"></a>BME280::Init()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bme280.o(i._ZN6BME2804InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BME280::Init() &rArr; bme280_set_sensor_settings &rArr; put_device_to_sleep(const bme280_dev*) &rArr; reload_device_settings(const bme280_settings*, const bme280_dev*) &rArr; set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[16a]"></a>Beeper::CallbackOnTimer()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, beeper.o(i._ZN6Beeper15CallbackOnTimerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Beeper::CallbackOnTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[217]"></a>Beeper::Init()</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, beeper.o(i._ZN6Beeper4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Beeper::Init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[218]"></a>Beeper::Stop()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, beeper.o(i._ZN6Beeper4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Beeper::Stop() &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Start(int)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[21b]"></a>Beeper::Start(int)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, beeper.o(i._ZN6Beeper5StartEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Beeper::Start(int) &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Stop()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[222]"></a>Device::Init()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, device.o(i._ZN6Device4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Device::Init() &rArr; BME280::Init() &rArr; bme280_set_sensor_settings &rArr; put_device_to_sleep(const bme280_dev*) &rArr; reload_device_settings(const bme280_settings*, const bme280_dev*) &rArr; set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::Reset()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::Load()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Init()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::SetDirection(Direction::E)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Init()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280::Init()
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC12::Init()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[228]"></a>Device::Update()</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, device.o(i._ZN6Device6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = Device::Update() &rArr; Display::Update() &rArr; Menu::Draw() &rArr; Item::Draw(int, int, bool) const &rArr; Item::DrawOpened(int, int, bool) const &rArr; Page::DrawOpened(int, int, bool) const &rArr; Page::DrawItems(int, int, bool) const &rArr; Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measures::InRange(TypeMeasure::E, float)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Update()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::Send(TypeMeasure::E, float)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Update()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Start(int)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beeper::Stop()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280::GetMeasures(float*, float*, float*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::CalculateDewPoint(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[230]"></a>ST7735::WriteBuffer(int, int, int, int)</STRONG> (Thumb, 714 bytes, Stack size 48 bytes, st7735.o(i._ZN6ST773511WriteBufferEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ST7735::WriteBuffer(int, int, int, int) &rArr; ST7735::SetWindow(int, int, int, int) &rArr; ST7735::SendData8(unsigned char) &rArr; TimeMeterMS::TimeMeterMS() &rArr; TimeMeterMS::Reset() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::TimeMeterMS()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Buffer::GetLine(int, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SetWindow(int, int, int, int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::EndScene()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawTime()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
</UL>

<P><STRONG><a name="[225]"></a>ST7735::Init()</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, st7735.o(i._ZN6ST77354InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ST7735::Init() &rArr; Display::EndScene() &rArr; ST7735::WriteBuffer(int, int, int, int) &rArr; ST7735::SetWindow(int, int, int, int) &rArr; ST7735::SendData8(unsigned char) &rArr; TimeMeterMS::TimeMeterMS() &rArr; TimeMeterMS::Reset() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::EndScene()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::BeginScene(Color::E)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData8(unsigned char)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendCommand(unsigned char)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[203]"></a>Display::BeginScene(Color::E)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, display.o(i._ZN7Display10BeginSceneEN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Display::BeginScene(Color::E) &rArr; Display::Buffer::Fill(Color::E)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Buffer::Fill(Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Draw()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawBigMeasure()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[235]"></a>Display::SetMeasure(TypeMeasure::E, float)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, display.o(i._ZN7Display10SetMeasureEN11TypeMeasure1EEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Display::SetMeasure(TypeMeasure::E, float) &rArr; Settings::SaveMeasure(TypeMeasure::E, float) &rArr; Settings::Save() &rArr; HAL_ROM::SaveSettings(const Settings&) &rArr; HAL_ROM::Save(unsigned, const Settings&) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::SaveMeasure(TypeMeasure::E, float)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::SetFormat(const char*, ...)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::CurrentTime()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::Send(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[232]"></a>Display::Buffer::GetLine(int, int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(i._ZN7Display6Buffer7GetLineEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Display::Buffer::GetLine(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int, int, int, int)
</UL>

<P><STRONG><a name="[22c]"></a>Display::Update()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, display.o(i._ZN7Display6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = Display::Update() &rArr; Menu::Draw() &rArr; Item::Draw(int, int, bool) const &rArr; Item::DrawOpened(int, int, bool) const &rArr; Page::DrawOpened(int, int, bool) const &rArr; Page::DrawItems(int, int, bool) const &rArr; Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::SetFormat(const char*, ...)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Opened()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Draw()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::TimeMeterMS()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::EndScene()
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::BeginScene(Color::E)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawTime()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawBigMeasure()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[23c]"></a>Display::Measure::Draw(int, int, int)</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, display.o(i._ZN7Display7Measure4DrawEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Display::Measure::Draw(int, int, int) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Text::DrawBig(int, int, int, const char*, Color::E)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Rectangle(int, int)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Fill(int, int, Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawBigMeasure()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
</UL>

<P><STRONG><a name="[23a]"></a>Display::Measure::Name()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, display.o(i._ZN7Display7Measure4NameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Display::Measure::Name() &rArr; String&lang;(int)64&rang;::String(const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawBigMeasure()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
</UL>

<P><STRONG><a name="[23b]"></a>Display::Measure::Units()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, display.o(i._ZN7Display7Measure5UnitsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Display::Measure::Units() &rArr; String&lang;(int)64&rang;::String(const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawBigMeasure()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
</UL>

<P><STRONG><a name="[241]"></a>Display::Measure::Measure(TypeMeasure::E)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, display.o(i._ZN7Display7MeasureC1EN11TypeMeasure1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display::Measure::Measure(TypeMeasure::E)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Display_cpp_238b98d4
</UL>

<P><STRONG><a name="[308]"></a>Display::Measure::Measure__sub_object(TypeMeasure::E)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, display.o(i._ZN7Display7MeasureC1EN11TypeMeasure1EE), UNUSED)

<P><STRONG><a name="[208]"></a>Display::EndScene()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, display.o(i._ZN7Display8EndSceneEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Display::EndScene() &rArr; ST7735::WriteBuffer(int, int, int, int) &rArr; ST7735::SetWindow(int, int, int, int) &rArr; ST7735::SendData8(unsigned char) &rArr; TimeMeterMS::TimeMeterMS() &rArr; TimeMeterMS::Reset() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Draw()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawBigMeasure()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_ADC::GetVoltage()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_adc.o(i._ZN7HAL_ADC10GetVoltageEv))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnDraw_Battery(int, int)
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_ADC::Init()</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, hal_adc.o(i._ZN7HAL_ADC4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC::Init() &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[22d]"></a>HAL_ADC::Update()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_adc.o(i._ZN7HAL_ADC6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC::Update() &rArr; HAL_ADC_Start_IT &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::Reset()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::TimeMeterMS()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[245]"></a>HAL_ROM::LoadSettings(Settings&)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hal_rom.o(i._ZN7HAL_ROM12LoadSettingsER8Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ROM::LoadSettings(Settings&) &rArr; HAL_ROM::Load(unsigned, Settings&)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::Read(unsigned)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::Load(unsigned, Settings&)
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::Load()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::Save()
</UL>

<P><STRONG><a name="[248]"></a>HAL_ROM::SaveSettings(const Settings&)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hal_rom.o(i._ZN7HAL_ROM12SaveSettingsERK8Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_ROM::SaveSettings(const Settings&) &rArr; HAL_ROM::Save(unsigned, const Settings&) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::Save(unsigned, const Settings&)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::Read(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::Save()
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_RTC::Init()</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, hal_rtc.o(i._ZN7HAL_RTC4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_RTC::Init() &rArr; HAL_RTC_Init &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetOscConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_RTC::GetTime()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, hal_rtc.o(i._ZN7HAL_RTC7GetTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RTC::GetTime() &rArr; HAL_RTC::RTC_ReadTimeCounter(RTC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::RTC_ReadTimeCounter(RTC_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawTime()
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Before_OpenTime(bool)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[252]"></a>HAL_RTC::SetTime(const PackedTime&)</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, hal_rtc.o(i._ZN7HAL_RTC7SetTimeERK10PackedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RTC::SetTime(const PackedTime&) &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::RTC_WriteTimeCounter(RTC_HandleTypeDef*, unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[71]"></a>ZoneFPS::~ZoneFPS()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, display.o(i._ZN7ZoneFPSD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> zones.o(.constdata__ZTV7ZoneFPS)
<LI> display.o(i.__sti___11_Display_cpp_238b98d4)
</UL>
<P><STRONG><a name="[309]"></a>ZoneFPS::~ZoneFPS__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, display.o(i._ZN7ZoneFPSD1Ev), UNUSED)

<P><STRONG><a name="[1e7]"></a>HAL_I2C1::Init()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_i2c.o(i._ZN8HAL_I2C14InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_I2C1::Init() &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[6e]"></a>HAL_I2C1::Read(unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, hal_i2c.o(i._ZN8HAL_I2C14ReadEhhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_I2C1::Read(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bme280.o(i._ZN6BME2804InitEv)
</UL>
<P><STRONG><a name="[6f]"></a>HAL_I2C1::Write(unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, hal_i2c.o(i._ZN8HAL_I2C15WriteEhhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_I2C1::Write(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bme280.o(i._ZN6BME2804InitEv)
</UL>
<P><STRONG><a name="[227]"></a>InterCom::SetDirection(Direction::E)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intercom.o(i._ZN8InterCom12SetDirectionEN9Direction1EE))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[254]"></a>InterCom::CreateMessage(TypeMeasure::E, float)</STRONG> (Thumb, 164 bytes, Stack size 128 bytes, intercom.o(i._ZN8InterCom13CreateMessageEN11TypeMeasure1EEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = InterCom::CreateMessage(TypeMeasure::E, float) &rArr; HAL::GetUID() &rArr; String&lang;(int)64&rang;::String(const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math::CalculateCRC(const void*, int)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GetUID()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Size() const
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;unsigned char, (int)20&rang;::operator [](int)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::Send(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[229]"></a>InterCom::Send(TypeMeasure::E, float)</STRONG> (Thumb, 142 bytes, Stack size 120 bytes, intercom.o(i._ZN8InterCom4SendEN11TypeMeasure1EEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = InterCom::Send(TypeMeasure::E, float) &rArr; InterCom::CreateMessage(TypeMeasure::E, float) &rArr; HAL::GetUID() &rArr; String&lang;(int)64&rang;::String(const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC12::Transmit(const void*, int)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC::Transmit(const void*, int)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Size() const
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::CreateMessage(TypeMeasure::E, float)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::SetMeasure(TypeMeasure::E, float)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measures::IsFixed()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[226]"></a>Keyboard::Init()</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, keyboard.o(i._ZN8Keyboard4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Keyboard::Init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[22b]"></a>Keyboard::Update()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Keyboard::Update() &rArr; Keyboard::UpdateKey(Key::E) &rArr; Menu::ShortPress(Key::E) &rArr; Item::ShortPressure(Key::E) const &rArr; TimeItem::ShortPressure(Key::E) const &rArr; HAL_RTC::SetTime(const PackedTime&) &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::UpdateKey(Key::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[22a]"></a>Measures::InRange(TypeMeasure::E, float)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, measures.o(i._ZN8Measures7InRangeEN11TypeMeasure1EEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Measures::InRange(TypeMeasure::E, float) &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[1a9]"></a>Measures::IsFixed()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, measures.o(i._ZN8Measures7IsFixedEv))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::Send(TypeMeasure::E, float)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixateMeasures(bool)
</UL>

<P><STRONG><a name="[1aa]"></a>Measures::SetFixed(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, measures.o(i._ZN8Measures8SetFixedEb))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixateMeasures(bool)
</UL>

<P><STRONG><a name="[236]"></a>Settings::SaveMeasure(TypeMeasure::E, float)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, settings.o(i._ZN8Settings11SaveMeasureEN11TypeMeasure1EEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Settings::SaveMeasure(TypeMeasure::E, float) &rArr; Settings::Save() &rArr; HAL_ROM::SaveSettings(const Settings&) &rArr; HAL_ROM::Save(unsigned, const Settings&) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::Save()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::SetMeasure(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[1d2]"></a>Settings::ResetMeasure(TypeMeasure::E)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, settings.o(i._ZN8Settings12ResetMeasureEN11TypeMeasure1EE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnPress_ResetTemperature(bool)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnPress_ResetPressure(bool)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnPress_ResetHumidity(bool)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnPress_ResetDewPoint(bool)
</UL>

<P><STRONG><a name="[223]"></a>Settings::Load()</STRONG> (Thumb, 38 bytes, Stack size 88 bytes, settings.o(i._ZN8Settings4LoadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Settings::Load() &rArr; HAL_ROM::LoadSettings(Settings&) &rArr; HAL_ROM::Load(unsigned, Settings&)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::LoadSettings(Settings&)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[1d0]"></a>Settings::Save()</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, settings.o(i._ZN8Settings4SaveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Settings::Save() &rArr; HAL_ROM::SaveSettings(const Settings&) &rArr; HAL_ROM::Save(unsigned, const Settings&) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::SaveSettings(const Settings&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::LoadSettings(Settings&)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::operator !=(const Settings&)
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::SaveMeasure(TypeMeasure::E, float)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnOpenClose_MainPage(bool)
</UL>

<P><STRONG><a name="[224]"></a>Settings::Reset()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, settings.o(i._ZN8Settings5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Settings::Reset() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>

<P><STRONG><a name="[25e]"></a>Settings::operator ==(const Settings&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, settings.o(i._ZN8SettingseqERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Settings::operator ==(const Settings&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::operator !=(const Settings&)
</UL>

<P><STRONG><a name="[25d]"></a>Settings::operator !=(const Settings&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZN8SettingsneERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Settings::operator !=(const Settings&) &rArr; Settings::operator ==(const Settings&) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::operator ==(const Settings&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::Save()
</UL>

<P><STRONG><a name="[260]"></a>Rectangle::DrawFilled(int, int, Color::E, Color::E)</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, display.o(i._ZN9Rectangle10DrawFilledEiiN5Color1EES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Rectangle::DrawFilled(int, int, Color::E, Color::E) &rArr; Rectangle::Fill(int, int, Color::E) &rArr; VLine::Draw(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Rectangle(int, int)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Fill(int, int, Color::E)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Draw(int, int, Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawTitle(int, int) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[261]"></a>Rectangle::Draw(int, int, Color::E)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, display.o(i._ZN9Rectangle4DrawEiiN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Rectangle::Draw(int, int, Color::E) &rArr; VLine::Draw(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine::VLine(int)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine::Draw(int, int, Color::E)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine::HLine(int)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine::Draw(int, int, Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::DrawFilled(int, int, Color::E, Color::E)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[240]"></a>Rectangle::Fill(int, int, Color::E)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, display.o(i._ZN9Rectangle4FillEiiN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Rectangle::Fill(int, int, Color::E) &rArr; VLine::Draw(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine::VLine(int)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine::Draw(int, int, Color::E)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetCurrent(Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::DrawFilled(int, int, Color::E, Color::E)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Draw(int, int, int)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawTime()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawOpened(int, int, bool) const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawControl(int, int, const String&lang;(int)64&rang;&, bool) const
</UL>

<P><STRONG><a name="[23f]"></a>Rectangle::Rectangle(int, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i._ZN9RectangleC1Eii))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::DrawFilled(int, int, Color::E, Color::E)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Draw(int, int, int)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawTime()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawOpened(int, int, bool) const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawControl(int, int, const String&lang;(int)64&rang;&, bool) const
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawTitle(int, int) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[30a]"></a>Rectangle::Rectangle__sub_object(int, int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, display.o(i._ZN9RectangleC1Eii), UNUSED)

<P><STRONG><a name="[264]"></a>Int::ToStirng() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, values.o(i._ZNK3Int8ToStirngEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Int::ToStirng() const &rArr; String&lang;(int)64&rang;::String(const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[265]"></a>Item::DrawClosed(int, int, bool) const</STRONG> (Thumb, 310 bytes, Stack size 168 bytes, menuitems.o(i._ZNK4Item10DrawClosedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Rectangle(int, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::DrawFilled(int, int, Color::E, Color::E)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::MenuItem()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::MenuLetters(bool)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::DrawClosed(int, int, bool) const
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawClosed(int, int, bool) const
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawClosed(int, int, bool) const
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::DrawClosed(int, int, bool) const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::DrawClosed(int, int, bool) const
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::CurrentItem() const
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawClosed(int, int, bool) const
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Keeper() const
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Title() const
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Draw(int, int, bool) const
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawItems(int, int, bool) const
</UL>

<P><STRONG><a name="[207]"></a>Item::DrawOpened(int, int, bool) const</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, menuitems.o(i._ZNK4Item10DrawOpenedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = Item::DrawOpened(int, int, bool) const &rArr; Page::DrawOpened(int, int, bool) const &rArr; Page::DrawItems(int, int, bool) const &rArr; Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::DrawOpened(int, int, bool) const
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawOpened(int, int, bool) const
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::DrawOpened(int, int, bool) const
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::DrawOpened(int, int, bool) const
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawOpened(int, int, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Draw()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Draw(int, int, bool) const
</UL>

<P><STRONG><a name="[20a]"></a>Item::LongPressure(Key::E) const</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, menuitems.o(i._ZNK4Item12LongPressureEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Item::LongPressure(Key::E) const &rArr; Page::LongPressure(Key::E) const &rArr; StateItem::LongPressure(Key::E) const &rArr; Item::IsOpened() const
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::LongPressure(Key::E) const
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::LongPressure(Key::E) const
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::LongPressure() const
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::LongPressure() const
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::LongPressure() const
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LongPressure(Key::E) const
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::LongPress(Key::E)
</UL>

<P><STRONG><a name="[206]"></a>Item::NumberOnPage() const</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, menuitems.o(i._ZNK4Item12NumberOnPageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Item::NumberOnPage() const
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Keeper() const
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Draw()
</UL>

<P><STRONG><a name="[201]"></a>Item::ShortPressure(Key::E) const</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, menuitems.o(i._ZNK4Item13ShortPressureEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Item::ShortPressure(Key::E) const &rArr; TimeItem::ShortPressure(Key::E) const &rArr; HAL_RTC::SetTime(const PackedTime&) &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::ShortPressure(Key::E) const
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::ShortPressure(Key::E) const
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::ShortPressure(Key::E) const
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::ShortPressure(Key::E) const
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::ShortPressure(Key::E) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::ShortPressure(Key::E) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::ShortPress(Key::E)
</UL>

<P><STRONG><a name="[205]"></a>Item::Draw(int, int, bool) const</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, menuitems.o(i._ZNK4Item4DrawEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = Item::Draw(int, int, bool) const &rArr; Item::DrawOpened(int, int, bool) const &rArr; Page::DrawOpened(int, int, bool) const &rArr; Page::DrawItems(int, int, bool) const &rArr; Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawOpened(int, int, bool) const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::IsOpened() const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Draw()
</UL>

<P><STRONG><a name="[200]"></a>Item::Open() const</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, menuitems.o(i._ZNK4Item4OpenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Item::Open() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::ShortPress(Key::E)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::LongPressure(Key::E) const
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::LongPressure(Key::E) const
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::ShortPressure(Key::E) const
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::LongPressure() const
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LongPressure(Key::E) const
</UL>

<P><STRONG><a name="[289]"></a>Item::Close() const</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menuitems.o(i._ZNK4Item5CloseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Item::Close() const
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::ShortPressure(Key::E) const
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::ShortPressure(Key::E) const
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
</UL>

<P><STRONG><a name="[26a]"></a>Item::Title() const</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, menuitems.o(i._ZNK4Item5TitleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Item::Title() const &rArr; String&lang;(int)64&rang;::String(const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawTitle(int, int) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[268]"></a>Item::Keeper() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menuitems.o(i._ZNK4Item6KeeperEv))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::NumberOnPage() const
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::IsOpened() const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[283]"></a>Item::IsOpened() const</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, menuitems.o(i._ZNK4Item8IsOpenedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Item::IsOpened() const
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Keeper() const
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Draw(int, int, bool) const
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::LongPressure(Key::E) const
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::ShortPressure(Key::E) const
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::LongPressure(Key::E) const
</UL>

<P><STRONG><a name="[26b]"></a>Page::DrawClosed(int, int, bool) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menuitems.o(i._ZNK4Page10DrawClosedEiib))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[271]"></a>Page::DrawOpened(int, int, bool) const</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, menuitems.o(i._ZNK4Page10DrawOpenedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = Page::DrawOpened(int, int, bool) const &rArr; Page::DrawItems(int, int, bool) const &rArr; Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawTitle(int, int) const
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawItems(int, int, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[266]"></a>Page::CurrentItem() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menuitems.o(i._ZNK4Page11CurrentItemEv))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LongPressure(Key::E) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[277]"></a>Page::LongPressure(Key::E) const</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, menuitems.o(i._ZNK4Page12LongPressureEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Page::LongPressure(Key::E) const &rArr; StateItem::LongPressure(Key::E) const &rArr; Item::IsOpened() const
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::LongPressure(Key::E) const
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::LongPressure(Key::E) const
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::LongPressure() const
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::LongPressure() const
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::LongPressure() const
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::CurrentItem() const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Open() const
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::LongPressure(Key::E) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[27d]"></a>Page::ShortPressure(Key::E) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, menuitems.o(i._ZNK4Page13ShortPressureEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Page::ShortPressure(Key::E) const &rArr; Page::LongPressure(Key::E) const &rArr; StateItem::LongPressure(Key::E) const &rArr; Item::IsOpened() const
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::NumItems() const
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LongPressure(Key::E) const
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[287]"></a>Page::LastItemOnScreen() const</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, menuitems.o(i._ZNK4Page16LastItemOnScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Page::LastItemOnScreen() const
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::NumItems() const
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::FirstItemOnScreen() const
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawItems(int, int, bool) const
</UL>

<P><STRONG><a name="[288]"></a>Page::FirstItemOnScreen() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menuitems.o(i._ZNK4Page17FirstItemOnScreenEv))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawItems(int, int, bool) const
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LastItemOnScreen() const
</UL>

<P><STRONG><a name="[1a5]"></a>Page::Close() const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, menuitems.o(i._ZNK4Page5CloseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Page::Close() const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::NumItems() const
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Close() const
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePageTemperature(bool)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePagePressure(bool)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePageHumidity(bool)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePageDewPoint(bool)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseMeasures(bool)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePageSystem(bool)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseMainPage(bool)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePageHC12(bool)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePageDisplay(bool)
</UL>

<P><STRONG><a name="[286]"></a>Page::NumItems() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menuitems.o(i._ZNK4Page8NumItemsEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LastItemOnScreen() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[285]"></a>Page::DrawItems(int, int, bool) const</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, menuitems.o(i._ZNK4Page9DrawItemsEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = Page::DrawItems(int, int, bool) const &rArr; Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::FirstItemOnScreen() const
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LastItemOnScreen() const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[284]"></a>Page::DrawTitle(int, int) const</STRONG> (Thumb, 76 bytes, Stack size 160 bytes, menuitems.o(i._ZNK4Page9DrawTitleEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Page::DrawTitle(int, int) const &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Rectangle(int, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::DrawFilled(int, int, Color::E, Color::E)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Title() const
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[28a]"></a>Float::ToString() const</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, values.o(i._ZNK5Float8ToStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Float::ToString() const &rArr; String&lang;(int)64&rang;::String(const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[26d]"></a>Button::DrawClosed(int, int, bool) const</STRONG> (Thumb, 84 bytes, Stack size 88 bytes, menuitems.o(i._ZNK6Button10DrawClosedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Button::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::DrawOpened(int, int, bool) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[273]"></a>Button::DrawOpened(int, int, bool) const</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, menuitems.o(i._ZNK6Button10DrawOpenedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Button::DrawOpened(int, int, bool) const &rArr; Button::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::DrawClosed(int, int, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[279]"></a>Button::LongPressure() const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, menuitems.o(i._ZNK6Button12LongPressureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Button::LongPressure() const
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::LongPressure(Key::E) const
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LongPressure(Key::E) const
</UL>

<P><STRONG><a name="[27f]"></a>Button::ShortPressure(Key::E) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menuitems.o(i._ZNK6Button13ShortPressureEN3Key1EE))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[26c]"></a>Choice::DrawClosed(int, int, bool) const</STRONG> (Thumb, 50 bytes, Stack size 96 bytes, menuitems.o(i._ZNK6Choice10DrawClosedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Choice::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::CurrentName() const
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[272]"></a>Choice::DrawOpened(int, int, bool) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menuitems.o(i._ZNK6Choice10DrawOpenedEiib))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[28b]"></a>Choice::CurrentName() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menuitems.o(i._ZNK6Choice11CurrentNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[278]"></a>Choice::LongPressure() const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, menuitems.o(i._ZNK6Choice12LongPressureEv))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::LongPressure(Key::E) const
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LongPressure(Key::E) const
</UL>

<P><STRONG><a name="[27e]"></a>Choice::ShortPressure(Key::E) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menuitems.o(i._ZNK6Choice13ShortPressureEN3Key1EE))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[26e]"></a>Governor::DrawClosed(int, int, bool) const</STRONG> (Thumb, 78 bytes, Stack size 168 bytes, menuitems.o(i._ZNK8Governor10DrawClosedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Governor::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::MenuLetters(bool)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int::ToStirng() const
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int::Int(int)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[274]"></a>Governor::DrawOpened(int, int, bool) const</STRONG> (Thumb, 214 bytes, Stack size 248 bytes, menuitems.o(i._ZNK8Governor10DrawOpenedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = Governor::DrawOpened(int, int, bool) const &rArr; Governor::DrawControls(int, int) const &rArr; Governor::DrawControl(int, int, const String&lang;(int)64&rang;&, bool) const &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Rectangle(int, int)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::DrawFilled(int, int, Color::E, Color::E)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::MenuItem()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::MenuLetters(bool)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int::ToStirng() const
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int::Int(int)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawControls(int, int) const
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::CurrentItem() const
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Keeper() const
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Title() const
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[28f]"></a>Governor::DrawControl(int, int, const String&lang;(int)64&rang;&, bool) const</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, menuitems.o(i._ZNK8Governor11DrawControlEiiRK6StringILi64EEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Governor::DrawControl(int, int, const String&lang;(int)64&rang;&, bool) const &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Rectangle(int, int)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Fill(int, int, Color::E)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::MenuItem()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::MenuLetters(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawControls(int, int) const
</UL>

<P><STRONG><a name="[28e]"></a>Governor::DrawControls(int, int) const</STRONG> (Thumb, 132 bytes, Stack size 88 bytes, menuitems.o(i._ZNK8Governor12DrawControlsEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Governor::DrawControls(int, int) const &rArr; Governor::DrawControl(int, int, const String&lang;(int)64&rang;&, bool) const &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawControl(int, int, const String&lang;(int)64&rang;&, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[27a]"></a>Governor::LongPressure() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menuitems.o(i._ZNK8Governor12LongPressureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Governor::LongPressure() const &rArr; Item::Open() const
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Open() const
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::LongPressure(Key::E) const
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LongPressure(Key::E) const
</UL>

<P><STRONG><a name="[280]"></a>Governor::ShortPressure(Key::E) const</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, menuitems.o(i._ZNK8Governor13ShortPressureEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Governor::ShortPressure(Key::E) const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Math::CircleIncrease&lang;int&rang;(T1*, T1, T1)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Close() const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Open() const
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[26f]"></a>TimeItem::DrawClosed(int, int, bool) const</STRONG> (Thumb, 92 bytes, Stack size 120 bytes, menuitems.o(i._ZNK8TimeItem10DrawClosedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = TimeItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::GetTime()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[275]"></a>TimeItem::DrawOpened(int, int, bool) const</STRONG> (Thumb, 500 bytes, Stack size 248 bytes, menuitems.o(i._ZNK8TimeItem10DrawOpenedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = TimeItem::DrawOpened(int, int, bool) const &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Text::DrawBig(int, int, int, const char*, Color::E)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Rectangle(int, int)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Fill(int, int, Color::E)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Draw(int, int, Color::E)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::BeginScene(Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[27b]"></a>TimeItem::LongPressure(Key::E) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menuitems.o(i._ZNK8TimeItem12LongPressureEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimeItem::LongPressure(Key::E) const &rArr; Item::IsOpened() const
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::IsOpened() const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Open() const
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::LongPressure(Key::E) const
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LongPressure(Key::E) const
</UL>

<P><STRONG><a name="[281]"></a>TimeItem::ShortPressure(Key::E) const</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, menuitems.o(i._ZNK8TimeItem13ShortPressureEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TimeItem::ShortPressure(Key::E) const &rArr; HAL_RTC::SetTime(const PackedTime&) &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::SetTime(const PackedTime&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Math::CircleIncrease&lang;int&rang;(T1*, T1, T1)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::ChangeCurrentField(Key::E) const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::IsOpened() const
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Close() const
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[291]"></a>TimeItem::ChangeCurrentField(Key::E) const</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, menuitems.o(i._ZNK8TimeItem18ChangeCurrentFieldEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimeItem::ChangeCurrentField(Key::E) const &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Math::CircleIncrease&lang;int&rang;(T1*, T1, T1)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Math::CircleDecrease&lang;int&rang;(T1*, T1, T1)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[270]"></a>StateItem::DrawClosed(int, int, bool) const</STRONG> (Thumb, 154 bytes, Stack size 168 bytes, menuitems.o(i._ZNK9StateItem10DrawClosedEiib))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::MenuLetters(bool)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float::ToString() const
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float::Float(float)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[276]"></a>StateItem::DrawOpened(int, int, bool) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menuitems.o(i._ZNK9StateItem10DrawOpenedEiib))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawOpened(int, int, bool) const
</UL>

<P><STRONG><a name="[27c]"></a>StateItem::LongPressure(Key::E) const</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, menuitems.o(i._ZNK9StateItem12LongPressureEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StateItem::LongPressure(Key::E) const &rArr; Item::IsOpened() const
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::IsOpened() const
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Open() const
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::LongPressure(Key::E) const
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LongPressure(Key::E) const
</UL>

<P><STRONG><a name="[282]"></a>StateItem::ShortPressure(Key::E) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menuitems.o(i._ZNK9StateItem13ShortPressureEN3Key1EE))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[e1]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[244]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC::Update()
</UL>

<P><STRONG><a name="[294]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_divzero &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[295]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[297]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[c8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[299]"></a>bme280_compensate_data</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bme280_driver.o(i.bme280_compensate_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bme280_compensate_data &rArr; compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[1b3]"></a>bme280_get_regs</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bme280_driver.o(i.bme280_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check(const bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings(unsigned char, const bme280_settings*, const bme280_dev*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_humidity_settings(const bme280_settings*, const bme280_dev*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep(const bme280_dev*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_mode(unsigned char, const bme280_dev*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data(bme280_dev*)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[211]"></a>bme280_get_sensor_data</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, bme280_driver.o(i.bme280_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bme280_get_sensor_data &rArr; bme280_compensate_data &rArr; compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_parse_sensor_data
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check(const bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280::GetMeasures(float*, float*, float*)
</UL>

<P><STRONG><a name="[29c]"></a>bme280_get_sensor_mode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bme280_driver.o(i.bme280_get_sensor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bme280_get_sensor_mode &rArr; bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check(const bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[214]"></a>bme280_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bme280_driver.o(i.bme280_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bme280_init &rArr; bme280_soft_reset &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check(const bme280_dev*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data(bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280::Init()
</UL>

<P><STRONG><a name="[29b]"></a>bme280_parse_sensor_data</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, bme280_driver.o(i.bme280_parse_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bme280_parse_sensor_data
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[1bc]"></a>bme280_set_regs</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, bme280_driver.o(i.bme280_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check(const bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings(unsigned char, const bme280_settings*, const bme280_dev*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_humidity_settings(const bme280_settings*, const bme280_dev*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_mode(unsigned char, const bme280_dev*)
</UL>

<P><STRONG><a name="[216]"></a>bme280_set_sensor_mode</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bme280_driver.o(i.bme280_set_sensor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bme280_set_sensor_mode &rArr; put_device_to_sleep(const bme280_dev*) &rArr; reload_device_settings(const bme280_settings*, const bme280_dev*) &rArr; set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep(const bme280_dev*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_mode(unsigned char, const bme280_dev*)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check(const bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280::Init()
</UL>

<P><STRONG><a name="[215]"></a>bme280_set_sensor_settings</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bme280_driver.o(i.bme280_set_sensor_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bme280_set_sensor_settings &rArr; put_device_to_sleep(const bme280_dev*) &rArr; reload_device_settings(const bme280_settings*, const bme280_dev*) &rArr; set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings(unsigned char, const bme280_settings*, const bme280_dev*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_settings_changed(unsigned char, unsigned char)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep(const bme280_dev*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check(const bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280::Init()
</UL>

<P><STRONG><a name="[1ce]"></a>bme280_soft_reset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bme280_driver.o(i.bme280_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bme280_soft_reset &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check(const bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep(const bme280_dev*)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
</UL>

<P><STRONG><a name="[30b]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, logf.o(i.logf), UNUSED)

<P><STRONG><a name="[21e]"></a>logf</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, logf.o(i.logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = logf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::CalculateF(float, float)
</UL>

<P><STRONG><a name="[b5]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = main &rArr; Device::Update() &rArr; Display::Update() &rArr; Menu::Draw() &rArr; Item::Draw(int, int, bool) const &rArr; Item::DrawOpened(int, int, bool) const &rArr; Page::DrawOpened(int, int, bool) const &rArr; Page::DrawItems(int, int, bool) const &rArr; Item::DrawClosed(int, int, bool) const &rArr; StateItem::DrawClosed(int, int, bool) const &rArr; String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ac]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[6c]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[292]"></a>void Math::CircleDecrease&lang;int&rang;(T1*, T1, T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, math.o(t._ZN4Math14CircleDecreaseIiEEvPT_S1_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::ChangeCurrentField(Key::E) const
</UL>

<P><STRONG><a name="[290]"></a>void Math::CircleIncrease&lang;int&rang;(T1*, T1, T1)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, math.o(t._ZN4Math14CircleIncreaseIiEEvPT_S1_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::ChangeCurrentField(Key::E) const
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::ShortPressure(Key::E) const
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::ShortPressure(Key::E) const
</UL>

<P><STRONG><a name="[255]"></a>Buffer&lang;unsigned char, (int)20&rang;::operator [](int)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, intercom.o(t._ZN6BufferIhLi20EEixEi))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::CreateMessage(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[28d]"></a>String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, string.o(t._ZN6StringILi64EE19DrawRelativelyRightEiiN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E) &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Text::Length(const char*)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetCurrent(Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::DrawClosed(int, int, bool) const
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[238]"></a>String&lang;(int)64&rang;::SetFormat(const char*, ...)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, string.o(t._ZN6StringILi64EE9SetFormatEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = String&lang;(int)64&rang;::SetFormat(const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::SetMeasure(TypeMeasure::E, float)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[1ad]"></a>String&lang;(int)64&rang;::String(const char*, ...)</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, string.o(t._ZN6StringILi64EEC1EPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = String&lang;(int)64&rang;::String(const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GetUID()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Units()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Name()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawTime()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::Send(TypeMeasure::E, float)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnDraw_Battery(int, int)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float::ToString() const
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int::ToStirng() const
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::DrawClosed(int, int, bool) const
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawOpened(int, int, bool) const
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawClosed(int, int, bool) const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawControls(int, int) const
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::DrawClosed(int, int, bool) const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::DrawClosed(int, int, bool) const
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::Title() const
</UL>

<P><STRONG><a name="[30c]"></a>String&lang;(int)64&rang;::String__sub_object(const char*, ...)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, string.o(t._ZN6StringILi64EEC1EPKcz), UNUSED)

<P><STRONG><a name="[242]"></a>String&lang;(int)64&rang;::String()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(t._ZN6StringILi64EEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Measure(TypeMeasure::E)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Display_cpp_238b98d4
</UL>

<P><STRONG><a name="[30d]"></a>String&lang;(int)64&rang;::String__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, display.o(t._ZN6StringILi64EEC1Ev), UNUSED)

<P><STRONG><a name="[1ae]"></a>String&lang;(int)64&rang;::Draw(int, int, Color::E) const</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, string.o(t._ZNK6StringILi64EE4DrawEiiN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Size() const
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::SetCurrent(Color::E)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char::Draw(int, int, int, Color::E)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char::Char(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawTime()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::DrawMeasures()
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnDraw_Battery(int, int)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::DrawRelativelyRight(int, int, Color::E)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::DrawClosed(int, int, bool) const
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawOpened(int, int, bool) const
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeItem::DrawClosed(int, int, bool) const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawControl(int, int, const String&lang;(int)64&rang;&, bool) const
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Governor::DrawOpened(int, int, bool) const
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Choice::DrawClosed(int, int, bool) const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::DrawClosed(int, int, bool) const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DrawTitle(int, int) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Item::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[256]"></a>String&lang;(int)64&rang;::Size() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, intercom.o(t._ZNK6StringILi64EE4SizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = String&lang;(int)64&rang;::Size() const &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::CreateMessage(TypeMeasure::E, float)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::Send(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[212]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280::GetMeasures(float*, float*, float*)
</UL>

<P><STRONG><a name="[2a1]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>

<P><STRONG><a name="[2a4]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2a9]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>

<P><STRONG><a name="[2a7]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>

<P><STRONG><a name="[2a8]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)
</UL>

<P><STRONG><a name="[2aa]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>

<P><STRONG><a name="[30e]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1c6]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>

<P><STRONG><a name="[30f]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1c9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>

<P><STRONG><a name="[2ab]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2ae]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>

<P><STRONG><a name="[2ac]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2a3]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[2a6]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>

<P><STRONG><a name="[2ad]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>

<P><STRONG><a name="[2af]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)
</UL>

<P><STRONG><a name="[2b1]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::SetMeasure(TypeMeasure::E, float)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterCom::Send(TypeMeasure::E, float)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnDraw_Battery(int, int)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float::ToString() const
</UL>

<P><STRONG><a name="[2b2]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::CalculateF(float, float)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[2b4]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2b6]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[2ba]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BME280::GetMeasures(float*, float*, float*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::CalculateDewPoint(float, float)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::CalculateF(float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[2b8]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[237]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::SaveMeasure(TypeMeasure::E, float)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::SetMeasure(TypeMeasure::E, float)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateItem::DrawClosed(int, int, bool) const
</UL>

<P><STRONG><a name="[2b9]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measures::InRange(TypeMeasure::E, float)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[310]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[311]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[25c]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::SaveMeasure(TypeMeasure::E, float)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measures::InRange(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[2bb]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[2be]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::CalculateDewPoint(float, float)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::CalculateF(float, float)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[2bc]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2b3]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[2a2]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
</UL>

<P><STRONG><a name="[25b]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::SaveMeasure(TypeMeasure::E, float)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measures::InRange(TypeMeasure::E, float)
</UL>

<P><STRONG><a name="[2bd]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::CalculateDewPoint(float, float)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[2bf]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[89]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[2b7]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[296]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>

<P><STRONG><a name="[2c1]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[155]"></a>RCC_Delay(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(i._Z9RCC_Delayj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[134]"></a>PCD_EP_ISR_Handler(PCD_HandleTypeDef*)</STRONG> (Thumb, 1092 bytes, Stack size 32 bytes, stm32f1xx_hal_pcd.o(i._Z18PCD_EP_ISR_HandlerP17PCD_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = PCD_EP_ISR_Handler(PCD_HandleTypeDef*) &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePMA
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPMA
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i._Z18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[120]"></a>__NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i._Z26__NVIC_GetPriorityGroupingv))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[113]"></a>I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i._Z21I2C_RequestMemoryReadP17I2C_HandleTypeDeftttjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[116]"></a>I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i._Z22I2C_RequestMemoryWriteP17I2C_HandleTypeDeftttjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned) &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[1da]"></a>I2C_IsAcknowledgeFailed(I2C_HandleTypeDef*)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i._Z23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[112]"></a>I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i._Z26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[118]"></a>I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i._Z29I2C_WaitOnBTFFlagUntilTimeoutP17I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed(I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[117]"></a>I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i._Z29I2C_WaitOnTXEFlagUntilTimeoutP17I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed(I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[114]"></a>I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i._Z30I2C_WaitOnRXNEFlagUntilTimeoutP17I2C_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1d1]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i._Z39I2C_WaitOnMasterAddressFlagUntilTimeoutP17I2C_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead(I2C_HandleTypeDef*, unsigned short, unsigned short, unsigned short, unsigned, unsigned)
</UL>

<P><STRONG><a name="[174]"></a>UART_SetConfig(UART_HandleTypeDef*)</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i._Z14UART_SetConfigP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig(UART_HandleTypeDef*) &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[16c]"></a>UART_Receive_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i._Z15UART_Receive_ITP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Receive_IT(UART_HandleTypeDef*) &rArr; HAL_UART_RxCpltCallback &rArr; HC12::ReceiveCallback() &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>UART_Transmit_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i._Z16UART_Transmit_ITP18UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>UART_EndRxTransfer(UART_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i._Z18UART_EndRxTransferP18UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>UART_EndTransmit_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i._Z19UART_EndTransmit_ITP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT(UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>UART_DMAAbortOnError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i._Z20UART_DMAAbortOnErrorP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[178]"></a>UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i._Z27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[15a]"></a>RTC_ExitInitMode(RTC_HandleTypeDef*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i._Z16RTC_ExitInitModeP17RTC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_ExitInitMode(RTC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[159]"></a>RTC_EnterInitMode(RTC_HandleTypeDef*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f1xx_hal_rtc.o(i._Z17RTC_EnterInitModeP17RTC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode(RTC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[fd]"></a>FLASH_SetErrorCode()</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i._Z18FLASH_SetErrorCodev))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[10d]"></a>FLASH_Program_HalfWord(unsigned, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i._Z22FLASH_Program_HalfWordjt))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[109]"></a>FLASH_MassErase(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i._Z15FLASH_MassErasej))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[21d]"></a>Device::CalculateF(float, float)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, device.o(i._ZN6Device10CalculateFEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Device::CalculateF(float, float) &rArr; logf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::CalculateDewPoint(float, float)
</UL>

<P><STRONG><a name="[220]"></a>Device::CalculateDewPoint(float, float)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, device.o(i._ZN6Device17CalculateDewPointEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Device::CalculateDewPoint(float, float) &rArr; Device::CalculateF(float, float) &rArr; logf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::CalculateF(float, float)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device::Update()
</UL>

<P><STRONG><a name="[239]"></a>Display::DrawMeasures()</STRONG> (Thumb, 270 bytes, Stack size 312 bytes, display.o(i._ZN7Display12DrawMeasuresEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = Display::DrawMeasures() &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int, int, int, int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Height()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Set(TypeFont::E)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Units()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Name()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Draw(int, int, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measures::InRange(TypeMeasure::E, float)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[23d]"></a>Display::DrawBigMeasure()</STRONG> (Thumb, 150 bytes, Stack size 216 bytes, display.o(i._ZN7Display14DrawBigMeasureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Display::DrawBigMeasure() &rArr; Display::Measure::Draw(int, int, int) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Text::DrawBig(int, int, int, const char*, Color::E)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Set(TypeFont::E)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::EndScene()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Units()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Name()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Draw(int, int, int)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::BeginScene(Color::E)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[234]"></a>Display::Buffer::Fill(Color::E)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, display.o(i._ZN7Display6Buffer4FillEN5Color1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Display::Buffer::Fill(Color::E)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::BeginScene(Color::E)
</UL>

<P><STRONG><a name="[20d]"></a>Display::Buffer::SetPoint(int, int)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, display.o(i._ZN7Display6Buffer8SetPointEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Color::GetCurrent()
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VLine::Draw(int, int, Color::E)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Point::Set(int, int, Color::E)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLine::Draw(int, int, Color::E)
</UL>

<P><STRONG><a name="[23e]"></a>Display::DrawTime()</STRONG> (Thumb, 116 bytes, Stack size 128 bytes, display.o(i._ZN7Display8DrawTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Display::DrawTime() &rArr; String&lang;(int)64&rang;::Draw(int, int, Color::E) const &rArr; Char::Draw(int, int, int, Color::E) &rArr; Font::Text::DrawBig(int, int, int, const char*, Color::E) &rArr; Font::Symbol::DrawBig(int, int, int, char) &rArr; Point::Set(int, int, Color::E) &rArr; Display::Buffer::SetPoint(int, int) &rArr; Color::GetCurrent() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::Draw(int, int, Color::E) const
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::GetTime()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String(const char*, ...)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int, int, int, int)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font::Set(TypeFont::E)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Rectangle(int, int)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rectangle::Fill(int, int, Color::E)
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Update()
</UL>

<P><STRONG><a name="[75]"></a>__sti___11_Display_cpp_238b98d4</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, display.o(i.__sti___11_Display_cpp_238b98d4))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___11_Display_cpp_238b98d4 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String&lang;(int)64&rang;::String()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Measure::Measure(TypeMeasure::E)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.init_array)
</UL>
<P><STRONG><a name="[257]"></a>Keyboard::KeyPressed(Key::E)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard10KeyPressedEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Keyboard::KeyPressed(Key::E)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::UpdateKey(Key::E)
</UL>

<P><STRONG><a name="[259]"></a>Keyboard::UpdateKey(Key::E)</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, keyboard.o(i._ZN8Keyboard9UpdateKeyEN3Key1EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Keyboard::UpdateKey(Key::E) &rArr; Menu::ShortPress(Key::E) &rArr; Item::ShortPressure(Key::E) const &rArr; TimeItem::ShortPressure(Key::E) const &rArr; HAL_RTC::SetTime(const PackedTime&) &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::LongPress(Key::E)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::ShortPress(Key::E)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::KeyPressed(Key::E)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::Reset()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard::Update()
</UL>

<P><STRONG><a name="[76]"></a>__sti___12_Keyboard_cpp_key1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, keyboard.o(i.__sti___12_Keyboard_cpp_key1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___12_Keyboard_cpp_key1 &rArr; TimeMeterMS::TimeMeterMS() &rArr; TimeMeterMS::Reset() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key::Key(Key::E)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::TimeMeterMS()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyboard.o(.init_array)
</UL>
<P><STRONG><a name="[18b]"></a>USBD_Get_USB_Status(HAL_StatusTypeDef)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbd_conf.o(i._Z19USBD_Get_USB_Status17HAL_StatusTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1a7]"></a>IntToUnicode(unsigned, unsigned char*, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, usbd_desc.o(i._Z12IntToUnicodejPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum()
</UL>

<P><STRONG><a name="[1a6]"></a>Get_SerialNum()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbd_desc.o(i._Z13Get_SerialNumv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum() &rArr; IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode(unsigned, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef, unsigned short*)
</UL>

<P><STRONG><a name="[15]"></a>CDC_Init_FS()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cdc.o(i._Z11CDC_Init_FSv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CDC_Init_FS() &rArr; USBD_CDC_SetTxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>CDC_DeInit_FS()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cdc.o(i._Z13CDC_DeInit_FSv))
<BR>[Address Reference Count : 1]<UL><LI> cdc.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>CDC_Control_FS(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, cdc.o(i._Z14CDC_Control_FShPht))
<BR>[Address Reference Count : 1]<UL><LI> cdc.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>CDC_Receive_FS(unsigned char*, unsigned*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cdc.o(i._Z14CDC_Receive_FSPhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CDC_Receive_FS(unsigned char*, unsigned*) &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbd_cdc.o(i._Z13USBD_CDC_InitP19_USBD_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_CDC_Init(_USBD_HandleTypeDef*, unsigned char) &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usbd_cdc.o(i._Z14USBD_CDC_SetupP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_CDC_Setup(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_CDC_DataIn(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_cdc.o(i._Z15USBD_CDC_DataInP19_USBD_HandleTypeDefh))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_cdc.o(i._Z15USBD_CDC_DeInitP19_USBD_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_DeInit(_USBD_HandleTypeDef*, unsigned char) &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_cdc.o(i._Z16USBD_CDC_DataOutP19_USBD_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CDC_DataOut(_USBD_HandleTypeDef*, unsigned char) &rArr; USBD_LL_GetRxDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_CDC_EP0_RxReady(_USBD_HandleTypeDef*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_cdc.o(i._Z20USBD_CDC_EP0_RxReadyP19_USBD_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_EP0_RxReady(_USBD_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBD_CDC_GetFSCfgDesc(unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i._Z21USBD_CDC_GetFSCfgDescPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>USBD_CDC_GetHSCfgDesc(unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i._Z21USBD_CDC_GetHSCfgDescPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBD_CDC_GetOtherSpeedCfgDesc(unsigned short*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_cdc.o(i._Z29USBD_CDC_GetOtherSpeedCfgDescPt))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[187]"></a>USBD_GetLen(unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_ctlreq.o(i._Z11USBD_GetLenPh))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[19c]"></a>USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._Z14USBD_GetConfigP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_GetConfig(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[19d]"></a>USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._Z14USBD_GetStatusP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_GetStatus(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[19b]"></a>USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._Z14USBD_SetConfigP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_SetConfig(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[19f]"></a>USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._Z15USBD_ClrFeatureP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_ClrFeature(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[19a]"></a>USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._Z15USBD_SetAddressP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_SetAddress(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[19e]"></a>USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ctlreq.o(i._Z15USBD_SetFeatureP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_SetFeature(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[199]"></a>USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*)</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, usbd_ctlreq.o(i._Z18USBD_GetDescriptorP19_USBD_HandleTypeDefP13usb_setup_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_GetDescriptor(_USBD_HandleTypeDef*, usb_setup_req*) &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePMA
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1be]"></a>SystemClock_Config()</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, hal.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Init()
</UL>

<P><STRONG><a name="[24d]"></a>HAL_RTC::RTC_ExitInitMode(RTC_HandleTypeDef*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hal_rtc.o(i._ZN7HAL_RTC16RTC_ExitInitModeEP17RTC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC::RTC_ExitInitMode(RTC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::RTC_WriteTimeCounter(RTC_HandleTypeDef*, unsigned)
</UL>

<P><STRONG><a name="[24e]"></a>HAL_RTC::RTC_EnterInitMode(RTC_HandleTypeDef*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hal_rtc.o(i._ZN7HAL_RTC17RTC_EnterInitModeEP17RTC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC::RTC_EnterInitMode(RTC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::RTC_WriteTimeCounter(RTC_HandleTypeDef*, unsigned)
</UL>

<P><STRONG><a name="[251]"></a>HAL_RTC::RTC_ReadTimeCounter(RTC_HandleTypeDef*)</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, hal_rtc.o(i._ZN7HAL_RTC19RTC_ReadTimeCounterEP17RTC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTC::RTC_ReadTimeCounter(RTC_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::GetTime()
</UL>

<P><STRONG><a name="[24f]"></a>HAL_RTC::RTC_WriteTimeCounter(RTC_HandleTypeDef*, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hal_rtc.o(i._ZN7HAL_RTC20RTC_WriteTimeCounterEP17RTC_HandleTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC::RTC_WriteTimeCounter(RTC_HandleTypeDef*, unsigned) &rArr; HAL_RTC::RTC_EnterInitMode(RTC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::RTC_EnterInitMode(RTC_HandleTypeDef*)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::RTC_ExitInitMode(RTC_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::SetTime(const PackedTime&)
</UL>

<P><STRONG><a name="[247]"></a>HAL_ROM::Load(unsigned, Settings&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_rom.o(i._ZN7HAL_ROM4LoadEjR8Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ROM::Load(unsigned, Settings&)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::LoadSettings(Settings&)
</UL>

<P><STRONG><a name="[246]"></a>HAL_ROM::Read(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_rom.o(i._ZN7HAL_ROM4ReadEj))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::SaveSettings(const Settings&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::LoadSettings(Settings&)
</UL>

<P><STRONG><a name="[249]"></a>HAL_ROM::Save(unsigned, const Settings&)</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, hal_rom.o(i._ZN7HAL_ROM4SaveEjRK8Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ROM::Save(unsigned, const Settings&) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ROM::SaveSettings(const Settings&)
</UL>

<P><STRONG><a name="[1b1]"></a>get_calib_data(bme280_dev*)</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, bme280_driver.o(i._Z14get_calib_dataP10bme280_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_calib_data(bme280_dev*) &rArr; bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_press_calib_data(const unsigned char*, bme280_dev*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_humidity_calib_data(const unsigned char*, bme280_dev*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
</UL>

<P><STRONG><a name="[29a]"></a>null_ptr_check(const bme280_dev*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bme280_driver.o(i._Z14null_ptr_checkPK10bme280_dev))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[1b8]"></a>set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bme280_driver.o(i._Z16set_osr_settingshPK15bme280_settingsPK10bme280_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_humidity_settings(const bme280_settings*, const bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_device_settings(const bme280_settings*, const bme280_dev*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
</UL>

<P><STRONG><a name="[1bb]"></a>write_power_mode(unsigned char, const bme280_dev*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bme280_driver.o(i._Z16write_power_modehPK10bme280_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_power_mode(unsigned char, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[1c0]"></a>compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*)</STRONG> (Thumb, 426 bytes, Stack size 120 bytes, bme280_driver.o(i._Z19compensate_humidityPK18bme280_uncomp_dataPK17bme280_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = compensate_humidity(const bme280_uncomp_data*, const bme280_calib_data*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[1ca]"></a>compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*)</STRONG> (Thumb, 660 bytes, Stack size 96 bytes, bme280_driver.o(i._Z19compensate_pressurePK18bme280_uncomp_dataPK17bme280_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = compensate_pressure(const bme280_uncomp_data*, const bme280_calib_data*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[29d]"></a>interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bme280_driver.o(i._Z19interleave_reg_addrPKhPhS0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
</UL>

<P><STRONG><a name="[1cc]"></a>put_device_to_sleep(const bme280_dev*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bme280_driver.o(i._Z19put_device_to_sleepPK10bme280_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = put_device_to_sleep(const bme280_dev*) &rArr; reload_device_settings(const bme280_settings*, const bme280_dev*) &rArr; set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_device_settings(const bme280_settings*, const bme280_dev*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_settings(const unsigned char*, bme280_settings*)
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[29e]"></a>are_settings_changed(unsigned char, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bme280_driver.o(i._Z20are_settings_changedhh))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
</UL>

<P><STRONG><a name="[1d6]"></a>fill_filter_settings(unsigned char*, const bme280_settings*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bme280_driver.o(i._Z20fill_filter_settingsPhPK15bme280_settings))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings(unsigned char, const bme280_settings*, const bme280_dev*)
</UL>

<P><STRONG><a name="[1d7]"></a>fill_standby_settings(unsigned char*, const bme280_settings*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bme280_driver.o(i._Z21fill_standby_settingsPhPK15bme280_settings))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings(unsigned char, const bme280_settings*, const bme280_dev*)
</UL>

<P><STRONG><a name="[1cd]"></a>parse_device_settings(const unsigned char*, bme280_settings*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bme280_driver.o(i._Z21parse_device_settingsPKhP15bme280_settings))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep(const bme280_dev*)
</UL>

<P><STRONG><a name="[1d3]"></a>compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*)</STRONG> (Thumb, 310 bytes, Stack size 80 bytes, bme280_driver.o(i._Z22compensate_temperaturePK18bme280_uncomp_dataP17bme280_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = compensate_temperature(const bme280_uncomp_data*, bme280_calib_data*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[1d9]"></a>fill_osr_temp_settings(unsigned char*, const bme280_settings*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bme280_driver.o(i._Z22fill_osr_temp_settingsPhPK15bme280_settings))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*)
</UL>

<P><STRONG><a name="[1cf]"></a>reload_device_settings(const bme280_settings*, const bme280_dev*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bme280_driver.o(i._Z22reload_device_settingsPK15bme280_settingsPK10bme280_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = reload_device_settings(const bme280_settings*, const bme280_dev*) &rArr; set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings(unsigned char, const bme280_settings*, const bme280_dev*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep(const bme280_dev*)
</UL>

<P><STRONG><a name="[1d8]"></a>fill_osr_press_settings(unsigned char*, const bme280_settings*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bme280_driver.o(i._Z23fill_osr_press_settingsPhPK15bme280_settings))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*)
</UL>

<P><STRONG><a name="[1b5]"></a>parse_humidity_calib_data(const unsigned char*, bme280_dev*)</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, bme280_driver.o(i._Z25parse_humidity_calib_dataPKhP10bme280_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parse_humidity_calib_data(const unsigned char*, bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data(bme280_dev*)
</UL>

<P><STRONG><a name="[1b9]"></a>set_osr_humidity_settings(const bme280_settings*, const bme280_dev*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bme280_driver.o(i._Z25set_osr_humidity_settingsPK15bme280_settingsPK10bme280_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_osr_humidity_settings(const bme280_settings*, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*)
</UL>

<P><STRONG><a name="[1b4]"></a>parse_temp_press_calib_data(const unsigned char*, bme280_dev*)</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, bme280_driver.o(i._Z27parse_temp_press_calib_dataPKhP10bme280_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parse_temp_press_calib_data(const unsigned char*, bme280_dev*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data(bme280_dev*)
</UL>

<P><STRONG><a name="[1d5]"></a>set_filter_standby_settings(unsigned char, const bme280_settings*, const bme280_dev*)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bme280_driver.o(i._Z27set_filter_standby_settingshPK15bme280_settingsPK10bme280_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_filter_standby_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_standby_settings(unsigned char*, const bme280_settings*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_filter_settings(unsigned char*, const bme280_settings*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_device_settings(const bme280_settings*, const bme280_dev*)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
</UL>

<P><STRONG><a name="[1ba]"></a>set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bme280_driver.o(i._Z27set_osr_press_temp_settingshPK15bme280_settingsPK10bme280_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_osr_press_temp_settings(unsigned char, const bme280_settings*, const bme280_dev*) &rArr; bme280_set_regs &rArr; interleave_reg_addr(const unsigned char*, unsigned char*, const unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_osr_press_settings(unsigned char*, const bme280_settings*)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_osr_temp_settings(unsigned char*, const bme280_settings*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings(unsigned char, const bme280_settings*, const bme280_dev*)
</UL>

<P><STRONG><a name="[77]"></a>__sti___8_HC12_cpp_2b370480</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc12.o(i.__sti___8_HC12_cpp_2b370480))
<BR>[Address Reference Count : 1]<UL><LI> hc12.o(.init_array)
</UL>
<P><STRONG><a name="[22e]"></a>ST7735::SendData16(unsigned short)</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, st7735.o(i._ZN6ST773510SendData16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ST7735::SendData16(unsigned short) &rArr; TimeMeterMS::TimeMeterMS() &rArr; TimeMeterMS::Reset() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::TimeMeterMS()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
</UL>

<P><STRONG><a name="[22f]"></a>ST7735::SendCommand(unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, st7735.o(i._ZN6ST773511SendCommandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ST7735::SendCommand(unsigned char) &rArr; TimeMeterMS::TimeMeterMS() &rArr; TimeMeterMS::Reset() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::TimeMeterMS()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int, int, int, int)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SetWindow(int, int, int, int)
</UL>

<P><STRONG><a name="[233]"></a>ST7735::SendData8(unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, st7735.o(i._ZN6ST77359SendData8Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ST7735::SendData8(unsigned char) &rArr; TimeMeterMS::TimeMeterMS() &rArr; TimeMeterMS::Reset() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::TimeMeterMS()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeMeterMS::ElapsedTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::Init()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SetWindow(int, int, int, int)
</UL>

<P><STRONG><a name="[231]"></a>ST7735::SetWindow(int, int, int, int)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, st7735.o(i._ZN6ST77359SetWindowEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ST7735::SetWindow(int, int, int, int) &rArr; ST7735::SendData8(unsigned char) &rArr; TimeMeterMS::TimeMeterMS() &rArr; TimeMeterMS::Reset() &rArr; Timer::CurrentTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendData8(unsigned char)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::SendCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735::WriteBuffer(int, int, int, int)
</UL>

<P><STRONG><a name="[78]"></a>__sti___13_MenuItems_cpp_a3e76341</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menuitems.o(i.__sti___13_MenuItems_cpp_a3e76341))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___13_MenuItems_cpp_a3e76341 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menuitems.o(.init_array)
</UL>
<P><STRONG><a name="[79]"></a>__sti___15_PageDisplay_cpp_868e8b3c</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pagedisplay.o(i.__sti___15_PageDisplay_cpp_868e8b3c))
<BR>[Address Reference Count : 1]<UL><LI> pagedisplay.o(.init_array)
</UL>
<P><STRONG><a name="[24]"></a>ClosePageHC12(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pagehc12.o(i._Z13ClosePageHC12b))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClosePageHC12(bool) &rArr; Page::Close() const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagehc12.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>__sti___12_PageHC12_cpp_bcd072d0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pagehc12.o(i.__sti___12_PageHC12_cpp_bcd072d0))
<BR>[Address Reference Count : 1]<UL><LI> pagehc12.o(.init_array)
</UL>
<P><STRONG><a name="[73]"></a>CloseMainPage(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pages.o(i._Z13CloseMainPageb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CloseMainPage(bool) &rArr; Page::Close() const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>OnOpenClose_MainPage(bool)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pages.o(i._Z20OnOpenClose_MainPageb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OnOpenClose_MainPage(bool) &rArr; Settings::Save() &rArr; HAL_ROM::SaveSettings(const Settings&) &rArr; HAL_ROM::Save(unsigned, const Settings&) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Settings::Save()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>__sti___9_Pages_cpp_pageMain</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pages.o(i.__sti___9_Pages_cpp_pageMain))
<BR>[Address Reference Count : 1]<UL><LI> pages.o(.init_array)
</UL>
<P><STRONG><a name="[27]"></a>Before_OpenTime(bool)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, pagesystem.o(i._Z15Before_OpenTimeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Before_OpenTime(bool) &rArr; HAL_RTC::GetTime() &rArr; HAL_RTC::RTC_ReadTimeCounter(RTC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC::GetTime()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagesystem.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>__sti___14_PageSystem_cpp_09ff3017</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, pagesystem.o(i.__sti___14_PageSystem_cpp_09ff3017))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___14_PageSystem_cpp_09ff3017
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagesystem.o(.init_array)
</UL>
<P><STRONG><a name="[32]"></a>CloseMeasures(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pagemeasures.o(i._Z13CloseMeasuresb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CloseMeasures(bool) &rArr; Page::Close() const &rArr; Item::Close() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Close() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>FixateMeasures(bool)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pagemeasures.o(i._Z14FixateMeasuresb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FixateMeasures(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measures::SetFixed(bool)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measures::IsFixed()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>__sti___16_PageMeasures_cpp_158d5ec3</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, pagemeasures.o(i.__sti___16_PageMeasures_cpp_158d5ec3))
<BR>[Address Reference Count : 1]<UL><LI> pagemeasures.o(.init_array)
</UL>
<P><STRONG><a name="[7e]"></a>__sti___12_Settings_cpp_gset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, settings.o(i.__sti___12_Settings_cpp_gset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___12_Settings_cpp_gset &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.init_array)
</UL>
<P><STRONG><a name="[d3]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[2b0]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[2a5]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2c0]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[2b5]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[da]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[6b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
